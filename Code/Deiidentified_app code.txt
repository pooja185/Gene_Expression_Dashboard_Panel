#Importing necessary libraries
import pandas as pd
import numpy as np
import hvplot.pandas
import holoviews as hv
import panel as pn

hvplot.extension('bokeh')

pn.extension('tabulator')

#Loading the necessary dataset
metadata = pd.read_csv(r'.csv').set_index('sample')
norm_counts = pd.read_csv(r'').set_index('gene')

#transpose norm_counts
genes_df=norm_counts.transpose()

#Combining the two datasets
combined_df=pd.concat ([metadata, genes_df], axis=1)

sel_widget_metadata = pn.widgets.AutocompleteInput(name="Select_metadata",options=metadata.columns[metadata.columns.isin(combined_df.columns)].tolist(), value='name')
sel_widget_genes = pn.widgets.AutocompleteInput(name="Select_gene", options=norm_counts.index[genes_df.columns.isin(combined_df.columns)].tolist(), value='ENSFCAG00000000076')

# Plot 1 - Boxplot and violin
# Define the plotting function
@pn.depends(sel_widget_metadata, sel_widget_genes)
def plot_graphs(metadata_var, gene_var):
    boxplot = combined_df[[metadata_var, gene_var]].hvplot.box(by=metadata_var, y=gene_var, c=metadata_var, legend = False, cmap='Category20', title='Boxplot', responsive=True)
    scatterplot = combined_df[[metadata_var, gene_var]].hvplot.scatter(x=metadata_var, y=gene_var, c=metadata_var, cmap='Category20', title='Scatterplot', responsive=True)
    overlay_plot = boxplot * scatterplot

    violinplot = combined_df[[metadata_var, gene_var]].hvplot.violin(by=metadata_var, y=gene_var, c=metadata_var, cmap='Category20', legend = False, title='Violinplot', responsive=True)
    scatterplot2 = combined_df[[metadata_var, gene_var]].hvplot.scatter(x=metadata_var, y=gene_var, c=metadata_var, cmap='Category20', title='Scatterplot', responsive=True)
    overlay_plot2 = violinplot * scatterplot2
    
    return pn.Row(overlay_plot, overlay_plot2)

# Create a panel to display the widgets and plots
combine_plot1 = pn.Row(plot_graphs)

#Plot 2: Scatterplot
sel_widget_genes1 = pn.widgets.AutocompleteInput(options=norm_counts.index[norm_counts.index.isin(combined_df.columns)].tolist(), name='X_axis_for_ScatterPlot', value='ENSFCAG00000000076')
sel_widget_genes2 = pn.widgets.AutocompleteInput(options=norm_counts.index[norm_counts.index.isin(combined_df.columns)].tolist(), name='Y_axis_for_ScatterPlot', value='ENSFCAG00000000075')
groupby_widget = pn.widgets.AutocompleteInput(options=metadata.columns[metadata.columns.isin(combined_df.columns)].tolist(), name='Groupby', value='group')

@pn.depends(sel_widget_genes1, sel_widget_genes2, groupby_widget)
def plot_scatter(gene1, gene2, groupby):
    return combined_df[[gene1, gene2]+metadata.columns.tolist()].hvplot.scatter(x=gene1, 
                                                             y=gene2, 
                                                             hover_cols=metadata.columns.tolist(), 
                                                             color=groupby, # can also use color=groupby_widget
                                                             title = 'ScatterPlot for visualizing correlation between two genes',
                                                             responsive=True
                                                            )

controls=pn.Column(groupby_widget)

combine_plot3=pn.Column(plot_scatter)

#Creating widget to display metadata table
df_widget=pn.pane.DataFrame(metadata)

#Creating dashboard
def create_dashboard():
    # Create dashboard
    COLS=12
    template = pn.template.FastGridTemplate(
        title="ZOMICS VizWise",
        sidebar=[
            pn.pane.Markdown('## ZOMICS Data Visualization App'),
                 pn.pane.PNG(r'zomics_logo.png', width=300, height=300),
                 pn.pane.Markdown("""
                 
                 
                 **This application lets the user visualize categorical plots and distribution plots for a preloaded dataset.***
                 
                 Please select variables fro metadata and gene to plot box and violin plots
                 
                 Please select 2 genes to visualize the correlation between 2 genes
                 
                 
                 """),
                 sel_widget_metadata,
                 sel_widget_genes,
                 sel_widget_genes1,
                 sel_widget_genes2,
                 groupby_widget],
        accent_base_color="#88d8b0",
        header_background="#e6550d",
        row_height=150,
        cols={'lg': COLS, 'md': COLS, 'sm': COLS, 'xs': COLS, 'xxs': COLS} 
    )
    template.main[:3,:6] = df_widget
    template.main[:3,6:] = combine_plot3
    template.main[3:6, :] = combine_plot1

    return template 


dashboard = create_dashboard()
dashboard.servable() 